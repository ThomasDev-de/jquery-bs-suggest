(function($){const debug=false;function generateId(){return"webcito_suggestion_"+getGUID()}function getTemplate($input){const disabledClass=$input.prop("disabled")?"disabled":"";let settings=$input.data("settings");const template=`
<div class="dropdown">
    <button class="${settings.btnClass} ${disabledClass} d-flex align-items-center" data-toggle="dropdown" data-bs-toggle="dropdown" aria-expanded="false" style="width:${settings.btnWidth}">
        <span class="js-selected-text">${settings.emptyText}</span>
    </button>
    <div class="dropdown-menu p-0 mt-1" style="min-width: 250px">
        <div class="w-100">
            <div class="p-2 d-flex flex-nowrap align-items-center justify-content-between border-bottom">
                <input autocomplete="false" type="search" class="form-control form-control-sm flex-fill" placeholder="${settings.searchPlaceholderText}">
                <button role="button" class="btn btn-light bg-transparent ms-2 js-webcito-reset">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
            <div class="p-2 js-suggest-results"></div>
            <div class="p-2 p-1 fw-light fst-italic d-flex align-items-center">
                <small class="suggest-status-text">${settings.waitingForTypingText}</small>
            </div>
        </div>
    </div>
</div>`;if(debug){console.log(template)}return template}function getWrapper($input){return $input.closest('[id^="webcito_suggestion_"]')}function buildDropdown($input){let w=getWrapper($input);if(w.length===1){return w}const id=generateId();const wrap=$("<div>",{id:id}).insertAfter($input);$input.hide();$input.appendTo(wrap);const template=getTemplate($input);$(template).prependTo(wrap);if(wrap.find(".js-selected-text").text()===""){setDropdownText($input,null)}return wrap}function refresh($input){const settings=$input.data("settings");destroy($input,false);$input.suggest(settings)}function destroy($input,show){let valBefore=$input.val();let wrapper=getWrapper($input);$input.insertBefore(wrapper);wrapper.remove();$input.val(valBefore);$input.removeClass("js-suggest");$input.removeData("settings");$input.removeData("selected");$input.removeData("initSuggest");if(show){$input.show()}}function setDropdownText($input,html=null){const wrapper=getWrapper($input);const settings=$input.data("settings");if(debug){console.log("setDropdownText",html,wrapper,settings)}wrapper.find(".js-selected-text").html('<span class="d-inline text-start">'+(html||settings.emptyText)+"</span>")}function getGUID(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,c=>(c^crypto.getRandomValues(new Uint8Array(1))[0]&15>>c/4).toString(16))}function reset($input){const settings=$input.data("settings");const wrapper=getWrapper($input);const searchBox=wrapper.find('[type="search"]');const list=wrapper.find(".js-suggest-results");$input.val(null);searchBox.val(null);list.empty();setStatus($input,settings.waitingForTypingText)}function setStatus($input,text){const wrapper=getWrapper($input);const statusBox=wrapper.find(".suggest-status-text");statusBox.html(text)}function getSettings($input){return $input.data("settings")||{}}function setDisabled($input,status){const dropDown=getWrapper($input);const btn=dropDown.find('[data-bs-toggle="dropdown"],[data-toggle="dropdown"]');if(status){btn.addClass("disabled");$input.prop("disabled",true)}else{btn.removeClass("disabled");$input.prop("disabled",false)}trigger($input,"toggleDisabled.bs.suggest",[status])}function trigger($input,eventName,addParams=[]){let params=addParams;if(eventName!=="any.bs.select"){if(!$input.data("suppressEvent")){$input.data("suppressEvent",true);$input.trigger("any.bs.select");$input.trigger(eventName,params);setTimeout(()=>{$input.removeData("suppressEvent")},0)}}else{$input.trigger(eventName,params)}}function clear($input){const settings=getSettings($input);const wrapper=getWrapper($input);const searchBox=wrapper.find('[type="search"]');const list=wrapper.find(".js-suggest-results");if(debug){console.log("function","cleart")}const valueBefore=$input.val();$input.val(null);searchBox.val(null);list.empty();setDropdownText($input,null);setStatus($input,settings.waitingForTypingText);trigger($input,"change.bs.suggest",[valueBefore,null])}function events($input){const wrapper=getWrapper($input);const searchBox=wrapper.find('[type="search"]');const settings=getSettings($input);let typingTimer=$input.data("typingTimer")||null;const list=wrapper.find(".js-suggest-results");searchBox.on("keyup",function(){if(debug){console.log("keyup")}if(typingTimer!==null){clearTimeout(typingTimer)}typingTimer=setTimeout(function(){setStatus($input,settings.loadingText);getData($input).then(()=>{})},settings.typingInterval);$input.data("typingTimer",typingTimer)});searchBox.on("keydown",function(){if(debug){console.log("keydown")}let settings=getSettings($input);if(typingTimer!==null){clearTimeout(typingTimer)}$input.data("typingTimer",typingTimer);setStatus($input,settings.typingText)});wrapper.on("click","a.dropdown-item",function(e){e.preventDefault();if(debug){console.log("click","a.dropdown-item")}let a=$(e.currentTarget);let item=a.data("item");let value=item.id;if($input.val()!==value){$input.val(value);setDropdownText($input,a.html());trigger($input,"change.bs.suggest",[item.id,item.text])}else{if(debug){console.log("Wert hat sich nicht geändert, Event nicht ausgelöst.")}}}).on("click",".js-webcito-reset",function(e){e.preventDefault();if(debug){console.log("click",".js-webcito-reset")}clear($input)}).on("hidden.bs.dropdown",".dropdown",function(){if(debug){console.log("hidden.bs.dropdown",".dropdown")}list.empty();searchBox.val(null);let settings=getSettings($input);setStatus($input,settings.waitingForTypingText)}).on("shown.bs.dropdown",".dropdown",function(){if(debug){console.log("shown.bs.dropdown",".dropdown")}searchBox.focus()}).on("show.bs.dropdown",".dropdown",function(){if(debug){console.log("shown.bs.dropdown",".dropdown")}let settings=getSettings($input);if(settings.loadDataOnShow){getData($input).then(()=>{})}})}function isValueEmpty(value){if(value===null||value===undefined){return true}if(Array.isArray(value)){return value.length===0}if(typeof value==="string"){return value.trim().length===0}return false}async function getData($input,searchModus=true,val=null,triggerChange=false){const settings=getSettings($input);const wrapper=getWrapper($input);const searchBox=wrapper.find('[type="search"]');const list=wrapper.find(".js-suggest-results");let xhr=$input.data("xhr")||null;if(xhr&&xhr.abort){xhr.abort();xhr=null}const searchValue=isValueEmpty(searchBox.val())?null:searchBox.val().trim();const data=searchModus?{q:searchValue,limit:settings.limit}:{value:val};const query=settings.queryParams(data);try{xhr=$.get($input.data("bsTarget"),query);$input.data("xhr",xhr);const response=await xhr;if(response.error){trigger($input,"error.bs.suggest",[response.error]);return}if(searchModus){const items=response.items||[];if(!items.length){console.log("suggest: no items")}list.empty();items.forEach(item=>{const div=$("<div>",{html:`<a class="dropdown-item px-1" href="#">${item.text}</a>`}).appendTo(list);div.find("a").data("item",item)});setStatus($input,items.length!==response.total?`showing ${items.length} / ${response.total} results`:`results: ${items.length}`)}else{$input.val(response.id);setDropdownText($input,response.text);if(triggerChange){trigger($input,"change.bs.suggest",[response.id,response.text])}}}catch(error){trigger($input,"error.bs.suggest",[error.message])}finally{$input.data("xhr",null)}}$.fn.suggest=function(options,params,params2){if(!$(this).length){return $(this)}if($(this).length>1){return $(this).each(function(){return $(this).suggest(options,params,params2)})}const DEFAULTS={limit:5,loadDataOnShow:true,typingInterval:400,multiple:false,valueSeparator:",",darkMenu:false,btnWidth:"fit-content",btnClass:"btn btn-outline-secondary",searchPlaceholderText:"Search",emptyText:"Please choose..",waitingForTypingText:"Waiting for typing",typingText:"typing..",loadingText:"Loading..",queryParams:function(params){return params}};const $input=$(this);const isOptionsSet=typeof options==="object"||typeof options==="undefined";const isCallMethod=typeof options==="string";if($input.data("initSuggest")!==true){$input.data("initSuggest",true);$input.addClass("js-suggest");if(isOptionsSet||!$input.data("settings")){const settings=$.extend({},DEFAULTS,options||{});$input.data("settings",settings);$input.data("selected",$input.val().split(settings.valueSeparator));if(debug){console.log("init",$input,settings)}}buildDropdown($input);events($input);if($input.val()!==""){getData($input,false,$input.val()).then(()=>{})}}if(isCallMethod){switch(options){case"val":if(debug){console.log("method","val",params,$input)}reset($input);getData($input,false,params,params2??false).then(()=>{});break;case"destroy":if(debug){console.log("method","destroy",$input)}destroy($input,true);break;case"refresh":if(debug){console.log("method","refresh",$input)}refresh($input);break;case"setDisabled":if(debug){console.log("method","setDisabled",params,$input)}setDisabled($input,params);refresh($input);break;case"updateOptions":{if(debug){console.log("method","updateOptions",params,$input)}const oldSettings=getSettings($input);$input.data("settings",$.extend({},DEFAULTS,oldSettings,params||{}));refresh($input)}break;case"setBtnClass":{if(debug){console.log("method","setBtnClass",params,$input)}const oldSettings=getSettings($input);oldSettings.btnClass=params;$input.data("settings",oldSettings);refresh($input)}break;case"clear":{if(debug){console.log("method","clear",params,$input)}clear($input)}break}}return $input}})(jQuery);